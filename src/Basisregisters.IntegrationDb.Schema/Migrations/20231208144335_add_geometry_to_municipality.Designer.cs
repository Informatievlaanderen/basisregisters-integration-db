// <auto-generated />
using System;
using Basisregisters.IntegrationDb.Schema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Basisregisters.IntegrationDb.Schema.Migrations
{
    [DbContext(typeof(IntegrationContext))]
    [Migration("20231208144335_add_geometry_to_municipality")]
    partial class add_geometry_to_municipality
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Address", b =>
                {
                    b.Property<int>("PersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<string>("BoxNumber")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("geometry")
                        .HasComputedColumnSql("ST_GeomFromGML(REPLACE(\"GeometryGml\",'https://www.opengis.net/def/crs/EPSG/0/', 'EPSG:')) ", true);

                    b.Property<string>("GeometryGml")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<long?>("IdempotenceKey")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsOfficiallyAssigned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<string>("NisCode")
                        .HasColumnType("text");

                    b.Property<string>("PositionMethod")
                        .HasColumnType("text");

                    b.Property<string>("PositionSpecification")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PuriId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("StreetNamePersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<string>("VersionString")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VersionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PersistentLocalId");

                    b.HasIndex("BoxNumber");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "GIST");

                    b.HasIndex("HouseNumber");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("NisCode");

                    b.HasIndex("PersistentLocalId");

                    b.HasIndex("PostalCode");

                    b.HasIndex("Status");

                    b.HasIndex("StreetNamePersistentLocalId");

                    b.HasIndex("VersionTimestamp");

                    b.ToTable("Addresses", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Building", b =>
                {
                    b.Property<int>("PersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<Geometry>("Geometry")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("geometry")
                        .HasComputedColumnSql("ST_GeomFromGML(REPLACE(\"GeometryGml\",'https://www.opengis.net/def/crs/EPSG/0/', 'EPSG:')) ", true);

                    b.Property<string>("GeometryGml")
                        .HasColumnType("text");

                    b.Property<string>("GeometryMethod")
                        .HasColumnType("text");

                    b.Property<long?>("IdempotenceKey")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<string>("PuriId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("VersionString")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VersionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PersistentLocalId");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "GIST");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("PersistentLocalId");

                    b.HasIndex("Status");

                    b.HasIndex("VersionTimestamp");

                    b.ToTable("Buildings", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.BuildingUnit", b =>
                {
                    b.Property<int>("PersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<string>("Addresses")
                        .HasColumnType("text");

                    b.Property<int?>("BuildingPersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("geometry")
                        .HasComputedColumnSql("ST_GeomFromGML(REPLACE(\"GeometryGml\",'https://www.opengis.net/def/crs/EPSG/0/', 'EPSG:')) ", true);

                    b.Property<string>("GeometryGml")
                        .HasColumnType("text");

                    b.Property<string>("GeometryMethod")
                        .HasColumnType("text");

                    b.Property<bool?>("HasDeviation")
                        .HasColumnType("boolean");

                    b.Property<long?>("IdempotenceKey")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<string>("PuriId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("VersionString")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VersionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PersistentLocalId");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "GIST");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("PersistentLocalId");

                    b.HasIndex("Status");

                    b.HasIndex("VersionTimestamp");

                    b.ToTable("BuildingUnits", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Municipality", b =>
                {
                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<bool?>("FacilityLanguageDutch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("FacilityLanguageEnglish")
                        .HasColumnType("boolean");

                    b.Property<bool?>("FacilityLanguageFrench")
                        .HasColumnType("boolean");

                    b.Property<bool?>("FacilityLanguageGerman")
                        .HasColumnType("boolean");

                    b.Property<long?>("IdempotenceKey")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("NameDutch")
                        .HasColumnType("text");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("text");

                    b.Property<string>("NameFrench")
                        .HasColumnType("text");

                    b.Property<string>("NameGerman")
                        .HasColumnType("text");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<bool?>("OfficialLanguageDutch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OfficialLanguageEnglish")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OfficialLanguageFrench")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OfficialLanguageGerman")
                        .HasColumnType("boolean");

                    b.Property<string>("PuriId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("VersionString")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VersionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NisCode");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("NameDutch");

                    b.HasIndex("NameEnglish");

                    b.HasIndex("NameFrench");

                    b.HasIndex("NameGerman");

                    b.HasIndex("NisCode");

                    b.HasIndex("Status");

                    b.HasIndex("VersionTimestamp");

                    b.ToTable("Municipalities", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.MunicipalityGeometry", b =>
                {
                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.HasKey("NisCode");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "GIST");

                    b.HasIndex("NisCode");

                    b.ToTable("MunicipalityGeometries", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Parcel", b =>
                {
                    b.Property<string>("CaPaKey")
                        .HasColumnType("text");

                    b.Property<string>("Addresses")
                        .HasColumnType("text");

                    b.Property<long?>("IdempotenceKey")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<string>("PuriId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("VersionString")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VersionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CaPaKey");

                    b.HasIndex("CaPaKey");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("Status");

                    b.HasIndex("VersionTimestamp");

                    b.ToTable("Parcels", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.PostInfo", b =>
                {
                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<long?>("IdempotenceKey")
                        .HasColumnType("bigint");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<int?>("NisCode")
                        .HasColumnType("integer");

                    b.Property<string>("PostalNameDutch")
                        .HasColumnType("text");

                    b.Property<string>("PostalNameEnglish")
                        .HasColumnType("text");

                    b.Property<string>("PostalNameFrench")
                        .HasColumnType("text");

                    b.Property<string>("PostalNameGerman")
                        .HasColumnType("text");

                    b.Property<string>("PuriId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("VersionString")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VersionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PostalCode");

                    b.HasIndex("NisCode");

                    b.HasIndex("PostalCode");

                    b.HasIndex("PostalNameDutch");

                    b.HasIndex("PostalNameEnglish");

                    b.HasIndex("PostalNameFrench");

                    b.HasIndex("PostalNameGerman");

                    b.HasIndex("Status");

                    b.HasIndex("VersionTimestamp");

                    b.ToTable("PostInfo", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.RoadSegment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccessRestrictionDutchName")
                        .HasColumnType("text");

                    b.Property<int?>("AccessRestrictionId")
                        .HasColumnType("integer");

                    b.Property<string>("BeginRoadNodeId")
                        .HasColumnType("text");

                    b.Property<string>("CategoryDutchName")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<int?>("EndRoadNodeId")
                        .HasColumnType("integer");

                    b.Property<Geometry>("GeometryAsHex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("geometry")
                        .HasComputedColumnSql("ST_AsHEXEWKB(ST_GeomFromText(\"GeometryAsWkt\"))", true);

                    b.Property<string>("GeometryAsWkt")
                        .HasColumnType("text");

                    b.Property<int?>("GeometrySrid")
                        .HasColumnType("integer");

                    b.Property<int?>("GeometryVersion")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LastChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LeftSideMunicipalityId")
                        .HasColumnType("text");

                    b.Property<string>("LeftSideMunicipalityNisCode")
                        .HasColumnType("text");

                    b.Property<string>("LeftSideStreetName")
                        .HasColumnType("text");

                    b.Property<int?>("LeftSideStreetNameId")
                        .HasColumnType("integer");

                    b.Property<string>("MaintainerId")
                        .HasColumnType("text");

                    b.Property<string>("MaintainerName")
                        .HasColumnType("text");

                    b.Property<string>("MethodDutchName")
                        .HasColumnType("text");

                    b.Property<int?>("MethodId")
                        .HasColumnType("integer");

                    b.Property<string>("MorphologyDutchName")
                        .HasColumnType("text");

                    b.Property<int?>("MorphologyId")
                        .HasColumnType("integer");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("RecordingDate")
                        .HasColumnType("text");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean");

                    b.Property<string>("RightSideMunicipalityId")
                        .HasColumnType("text");

                    b.Property<string>("RightSideMunicipalityNisCode")
                        .HasColumnType("text");

                    b.Property<string>("RightSideStreetName")
                        .HasColumnType("text");

                    b.Property<int?>("RightSideStreetNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoadSegmentVersion")
                        .HasColumnType("integer");

                    b.Property<string>("StatusDutchName")
                        .HasColumnType("text");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("StreetNameCachePosition")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer");

                    b.Property<int?>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeometryAsHex");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("GeometryAsHex"), "GIST");

                    b.HasIndex("MorphologyId");

                    b.HasIndex("StreetNameCachePosition");

                    b.ToTable("RoadSegments", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.StreetName", b =>
                {
                    b.Property<int>("PersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<string>("HomonymAdditionDutch")
                        .HasColumnType("text");

                    b.Property<string>("HomonymAdditionEnglish")
                        .HasColumnType("text");

                    b.Property<string>("HomonymAdditionFrench")
                        .HasColumnType("text");

                    b.Property<string>("HomonymAdditionGerman")
                        .HasColumnType("text");

                    b.Property<long?>("IdempotenceKey")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("NameDutch")
                        .HasColumnType("text");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("text");

                    b.Property<string>("NameFrench")
                        .HasColumnType("text");

                    b.Property<string>("NameGerman")
                        .HasColumnType("text");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<int?>("NisCode")
                        .HasColumnType("integer");

                    b.Property<string>("PuriId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("VersionString")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VersionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PersistentLocalId");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("NameDutch");

                    b.HasIndex("NameEnglish");

                    b.HasIndex("NameFrench");

                    b.HasIndex("NameGerman");

                    b.HasIndex("NisCode");

                    b.HasIndex("PersistentLocalId");

                    b.HasIndex("Status");

                    b.HasIndex("VersionTimestamp");

                    b.ToTable("StreetNames", "Integration");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.ActiveAddressWithoutLinkedParcelOrBuildingUnits", b =>
                {
                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("AddressPersistentLocalId");

                    b.HasIndex("NisCode");

                    b.ToView("ActiveAddressWithoutLinkedParcelOrBuildingUnits", "Integration");

                    b.ToSqlQuery("SELECT\r\n                                \"AddressPersistentLocalId\",\r\n                                \"NisCode\",\r\n                                \"Timestamp\"\r\n                                FROM \"Integration\".\"VIEW_ActiveAddressWithoutLinkedParcelOrBuildingUnit\" ");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.ActiveAddressWithoutLinkedParcels", b =>
                {
                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("AddressPersistentLocalId");

                    b.HasIndex("NisCode");

                    b.ToView("ActiveAddressWithoutLinkedParcels", "Integration");

                    b.ToSqlQuery("SELECT\r\n                                \"AddressPersistentLocalId\"\r\n                                ,\"NisCode\"\r\n                                ,\"Timestamp\"\r\n                            FROM \"Integration\".\"\r\n        CREATE MATERIALIZED VIEW IF NOT EXISTS \"Integration\".\"VIEW_ActiveAddressWithoutLinkedParcels\" AS\r\n        SELECT\r\n            a.\"PersistentLocalId\" AS \"AddressPersistentLocalId\",\r\n            a.\"NisCode\"::int,\r\n            CURRENT_TIMESTAMP AS \"Timestamp\"\r\n\r\n        FROM \"Integration\".\"Addresses\" AS a\r\n        WHERE EXISTS (\r\n            SELECT 1\r\n            FROM \"Integration\".\"Addresses\" AS address\r\n            LEFT JOIN \"Integration\".\"VIEW_ParcelAddressRelations\" AS parcelRelations\r\n                ON address.\"PersistentLocalId\" = parcelRelations.\"AddressPersistentLocalId\"\r\n            WHERE address.\"PersistentLocalId\" = a.\"PersistentLocalId\"\r\n                AND parcelRelations.\"AddressPersistentLocalId\" IS NULL\r\n                AND address.\"Status\" ILIKE 'inGebruik'\r\n                AND address.\"IsRemoved\" = false\r\n        )\r\n        ORDER BY a.\"PersistentLocalId\"\r\n        \" ");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.ActiveStreetnameWithoutLinkedRoadSegments", b =>
                {
                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<int>("StreetNamePersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NisCode");

                    b.HasIndex("StreetNamePersistentLocalId");

                    b.ToView("ActiveStreetnameWithoutLinkedRoadSegments", "Integration");

                    b.ToSqlQuery("\r\n                            SELECT\r\n                                \"StreetNamePersistentLocalId\",\r\n                                \"NisCode\",\r\n                                \"Timestamp\"\r\n                            FROM \"Integration\".\"VIEW_ActiveStreetnameWithoutLinkedRoadSegments\" ");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.AddressesLinkedToMultipleBuildingUnits", b =>
                {
                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<int>("LinkedBuildingUnitCount")
                        .HasColumnType("integer");

                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("AddressPersistentLocalId");

                    b.HasIndex("Status");

                    b.ToView("AddressesLinkedToMultipleBuildingUnits", "Integration");

                    b.ToSqlQuery("\r\n                            SELECT\r\n                                \"AddressPersistentLocalId\",\r\n                                \"LinkedBuildingUnitCount\",\r\n                                \"NisCode\",\r\n                                \"Timestamp\"\r\n                            FROM \"Integration\".\"VIEW_AddressesLinkedToMultipleBuildingUnits\" ");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.AddressesWithMultipleLinks", b =>
                {
                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("LinkedBuildingUnitCount")
                        .HasColumnType("integer");

                    b.Property<int>("LinkedParcelCount")
                        .HasColumnType("integer");

                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("AddressPersistentLocalId");

                    b.HasIndex("NisCode");

                    b.ToView("AddressesWithMultipleLinks", "Integration");

                    b.ToSqlQuery("\r\n                            SELECT\r\n                                \"AddressPersistentLocalId\",\r\n                                \"Status\",\r\n                                \"IsRemoved\",\r\n                                \"LinkedBuildingUnitCount\",\r\n                                \"LinkedParcelCount\",\r\n                                \"NisCode\",\r\n                                \"CURRENT_TIMESTAMP AS \"Timestamp\"\r\n                            FROM \"Integration\".\"VIEW_AddressesWithMultipleLinks\" ");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.AddressesWithoutPostalCode", b =>
                {
                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("AddressPersistentLocalId");

                    b.ToView("AddressesWithoutPostalCode", "Integration");

                    b.ToSqlQuery("\r\n                            SELECT\r\n                                \"AddressPersistentLocalId\",\r\n                                \"NisCode\",\r\n                                \"Timestamp\"\r\n                            FROM \"Integration\".\"VIEW_AddressesWithoutPostalCode\" ");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.BuildingUnitAddressRelations", b =>
                {
                    b.Property<string>("AddressPersistentLocalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BuildingUnitPersistentLocalId")
                        .HasColumnType("integer");

                    b.HasIndex("AddressPersistentLocalId");

                    b.HasIndex("BuildingUnitPersistentLocalId");

                    b.ToView("BuildingUnitAddressRelations", "Integration");

                    b.ToSqlQuery("\r\n                            SELECT\r\n                                \"BuildingUnitPersistentLocalId\",\r\n                                \"AddressPersistentLocalId\"\r\n                            FROM \"Integration\".\"VIEW_BuildingUnitAddressRelations\" ");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.ParcelAddressRelations", b =>
                {
                    b.Property<int?>("AddressPersistentLocalId")
                        .HasColumnType("integer");

                    b.Property<string>("CaPaKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("AddressPersistentLocalId");

                    b.HasIndex("CaPaKey");

                    b.ToView("ParcelAddressRelations", "Integration");

                    b.ToSqlQuery("\r\n                            SELECT\r\n                                \"CaPaKey\",\r\n                                \"AddressPersistentLocalId\"\r\n                            FROM \"Integration\".\"VIEW_ParcelAddressRelations\" ");
                });

            modelBuilder.Entity("Basisregisters.IntegrationDb.Schema.Models.Views.ParcelsLinkedToMultipleAddresses", b =>
                {
                    b.Property<string>("CaPaKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LinkedAddressCount")
                        .HasColumnType("integer");

                    b.Property<int>("NisCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.ToView("ParcelsLinkedToMultipleAddresses", "Integration");

                    b.ToSqlQuery("\r\n                            SELECT\r\n                                \"CaPaKey\",\r\n                                \"NisCode\",\r\n                                \"LinkedAddressCount\"\r\n                            FROM \"Integration\".\"VIEW_ParcelsLinkedToMultipleAddresses\" ");
                });
#pragma warning restore 612, 618
        }
    }
}
